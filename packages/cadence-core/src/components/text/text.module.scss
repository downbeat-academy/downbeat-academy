@use 'node_modules/cadence-tokens/dist/web/tokens.scss' as *;

// Base variables

$font-family: $typography-font-family-productive-body;
$line-height: $typography-line-height-productive-body;
$text-color: $color-foreground-primary;

.root {
	font-family: $font-family;
	line-height: $line-height;
	color: $text-color;
	margin: 1rem 0;
	text-decoration: none;
}

.collapse {
	margin: 0;
}

$types: ('expressive', 'productive');

$tags: (
	'h1': 'headline',
	'h2': 'headline',
	'h3': 'headline',
	'h4': 'headline',
	'h5': 'headline',
	'h6': 'headline',
	'p': 'body',
	'span': 'body',
	'caption': 'body',
	'code': 'body',
	'cite': 'body',
	'pre': 'body',
	'sup': 'body',
	'sub': 'body',
);

/* COLOR */

$colors: (
	'primary': $color-foreground-primary,
	'interactive': $color-foreground-interactive-default,
	'brand': $color-foreground-brand-default,
	'strong': $color-foreground-strong,
	'secondary': $color-foreground-secondary,
	'disabled': $color-foreground-disabled,
	'high-contrast': $color-foreground-high-contrast,
	'success': $color-foreground-success-default,
	'caution': $color-foreground-caution-default,
	'critical': $color-foreground-critical-default,
);

@each $color, $token in $colors {
	.color--#{$color} {
		color: $token;
	}
}

/* SIZE */

$sizes: (
	'6x-large': (
		'expressive': $typography-font-size-fixed-expressive-6x-large,
	),
	'5x-large': (
		'expressive': $typography-font-size-fixed-expressive-5x-large,
	),
	'4x-large': (
		'expressive': $typography-font-size-fixed-expressive-4x-large,
		'productive': $typography-font-size-fixed-productive-4x-large,
	),
	'3x-large': (
		'expressive': $typography-font-size-fixed-expressive-3x-large,
		'productive': $typography-font-size-fixed-productive-3x-large,
	),
	'2x-large': (
		'expressive': $typography-font-size-fixed-expressive-2x-large,
		'productive': $typography-font-size-fixed-productive-2x-large,
	),
	'x-large': (
		'expressive': $typography-font-size-fixed-expressive-x-large,
		'productive': $typography-font-size-fixed-productive-x-large,
	),
	'large': (
		'expressive': $typography-font-size-fixed-expressive-large,
		'productive': $typography-font-size-fixed-productive-large,
	),
	'base': (
		'expressive': $typography-font-size-fixed-expressive-base,
		'productive': $typography-font-size-fixed-productive-base,
	),
	'small': (
		'expressive': $typography-font-size-fixed-expressive-small,
		'productive': $typography-font-size-fixed-productive-small,
	),
	'x-small': (
		'expressive': $typography-font-size-fixed-expressive-x-small,
		'productive': $typography-font-size-fixed-productive-x-small,
	)
);

@each $size, $font-type in $sizes {
	@each $type, $token in $font-type {
		.size--#{$size}_type--#{$type} {
			font-size: $token;
		}
	}
}

/* TYPE */

$types: ('expressive', 'productive');

@each $type in $types {
	@each $tag, $category in $tags {
		.type--#{$type}_#{$category} {
			@if ($type == expressive) and ($category == body) {
				font-family: $typography-font-family-expressive-body;
			} @else if ($type == expressive) and ($category == headline) {
				font-family: $typography-font-family-expressive-headline;
			} @else if ($type == productive) and ($category == body) {
				font-family: $typography-font-family-productive-body;
			} @else if ($type == productive) and ($category == headline) {
				font-family: $typography-font-family-productive-headline;
			}
		}
	}
}
