.root {
	display: flex;
}

/* Direction */

$flex-directions: (row, column);

@each $direction in $flex-directions {
	.direction--#{$direction} {
		flex-direction: $direction;
	}
}

/* Gap */

$flex-gap-values: (
	'none': 0,
	'2x-small': $spacing-02,
	'x-small': $spacing-03,
	'small': $spacing-04,
	'base': $spacing-05,
	'large': $spacing-06,
	'x-large': $spacing-08,
	'2x-large': $spacing-10,
	'3x-large': $spacing-11,
	'4x-large': $spacing-12,
	'5x-large': $spacing-13,
);

@each $gap, $token in $flex-gap-values {
	.gap--#{$gap} {
		gap: map-get($flex-gap-values, $gap);
	}
}

/* Background */

$backgrounds: (
	primary: $color-surface-primary,
	secondary: $color-surface-secondary,
	brand: $color-surface-brand,
	interactive: $color-surface-interactive,
	positive: $color-surface-positive,
	info: $color-surface-info,
	caution: $color-surface-caution,
	critical: $color-surface-critical,
	dark: $color-palette-blackberry-900,
);

@each $background, $token in $backgrounds {
	.background--#{$background} {
		background: map-get($backgrounds, $background);
	}
}

/* Border radius */

$borderRadii: (
	default: $radius-default,
	soft: $radius-soft,
	medium: $radius-medium,
	hard: $radius-hard,
	rounded: $radius-rounded,
);

@each $borderRadius, $token in $borderRadii {
	.border-radius--#{$borderRadius} {
		border-radius: map-get($borderRadii, $borderRadius);
	}
}

/* Border color */

$border-colors: (
	default: $color-border-default,
	caution: $color-border-caution,
	critical: $color-border-critical,
	positive: $color-border-positive,
	info: $color-border-info,
	interactive: $color-border-interactive,
);

@each $border-color, $token in $border-colors {
	.border-color--#{$border-color} {
		border-color: map-get($border-colors, $border-color);
		border-style: solid;
		border-width: 1px;
	}
}

/* Justification */

$justifications: (start, end, space-between, space-around, space-evenly);

@each $justification in $justifications {
	.justify--#{$justification} {
		justify-content: $justification;
	}
}

/* Alignment */

$alignments: (flex-start, flex-end, center, stretch, baseline);

@each $alignment in $alignments {
	.align--#{$alignment} {
		align-items: $alignment;
	}
}

$text-alignments: (left, center, right);

@each $text-alignment in $text-alignments {
	.text-align--#{$text-alignment} {
		text-align: $text-alignment;
	}
}

/* Wrap */

$wraps: (nowrap, wrap, wrap-reverse);

@each $wrap in $wraps {
	.wrap--#{$wrap} {
		flex-wrap: $wrap;
	}
}

/* Padding */

$paddings: (
	x-small: $spacing-02,
	small: $spacing-03,
	medium: $spacing-05,
	large: $spacing-06,
	x-large: $spacing-08,
);

@each $padding, $token in $paddings {
	.padding--#{$padding} {
		padding: map-get($paddings, $padding);
	}
}
