/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    'error-pages': ErrorPage;
    articles: Article;
    categories: Category;
    difficulties: Difficulty;
    genres: Genre;
    instruments: Instrument;
    people: Person;
    users: User;
    media: Media;
    resources: Resource;
    'notation-files': NotationFile;
    'audio-upload': AudioUpload;
    lexicons: Lexicon;
    handbooks: Handbook;
    snippets: Snippet;
    podcasts: Podcast;
    lessons: Lesson;
    courses: Course;
    curricula: Curriculum;
    'landing-pages': LandingPage;
    'links-in-bio': LinksInBio;
    documents: Document;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    'error-pages': ErrorPagesSelect<false> | ErrorPagesSelect<true>;
    articles: ArticlesSelect<false> | ArticlesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    difficulties: DifficultiesSelect<false> | DifficultiesSelect<true>;
    genres: GenresSelect<false> | GenresSelect<true>;
    instruments: InstrumentsSelect<false> | InstrumentsSelect<true>;
    people: PeopleSelect<false> | PeopleSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    resources: ResourcesSelect<false> | ResourcesSelect<true>;
    'notation-files': NotationFilesSelect<false> | NotationFilesSelect<true>;
    'audio-upload': AudioUploadSelect<false> | AudioUploadSelect<true>;
    lexicons: LexiconsSelect<false> | LexiconsSelect<true>;
    handbooks: HandbooksSelect<false> | HandbooksSelect<true>;
    snippets: SnippetsSelect<false> | SnippetsSelect<true>;
    podcasts: PodcastsSelect<false> | PodcastsSelect<true>;
    lessons: LessonsSelect<false> | LessonsSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    curricula: CurriculaSelect<false> | CurriculaSelect<true>;
    'landing-pages': LandingPagesSelect<false> | LandingPagesSelect<true>;
    'links-in-bio': LinksInBioSelect<false> | LinksInBioSelect<true>;
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    footer: Footer;
    'site-settings': SiteSetting;
    navigation: Navigation;
  };
  globalsSelect: {
    footer: FooterSelect<false> | FooterSelect<true>;
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
    navigation: NavigationSelect<false> | NavigationSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  excerpt?: string | null;
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlockquoteBlock".
 */
export interface BlockquoteBlock {
  /**
   * The quote to display.
   */
  quote: string;
  /**
   * (Optional) Attribution for the quote.
   */
  attribution?: string | null;
  /**
   * A URL that links to a resource.
   */
  url?: {
    value?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'blockquote';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MusicNotationBlock".
 */
export interface MusicNotationBlock {
  /**
   * Title of the notation snippet.
   */
  title: string;
  /**
   * A brief description of the notation snippet.
   */
  description?: string | null;
  /**
   * Upload multiple MusicXML files in different keys
   */
  files?:
    | {
        /**
         * Upload a MusicXML file.
         */
        file?: (number | null) | NotationFile;
        label?: ('concert-c' | 'bass-clef' | 'b-flat' | 'e-flat' | 'concert-g' | 'concert-f' | 'custom') | null;
        customLabel?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'musicNotation';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notation-files".
 */
export interface NotationFile {
  id: number;
  title?: string | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FileDownloadBlock".
 */
export interface FileDownloadBlock {
  title: string;
  description?: string | null;
  /**
   * Upload a file to be downloaded by the user.
   */
  file?: (number | null) | Document;
  id?: string | null;
  blockName?: string | null;
  blockType: 'file-download';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: number;
  title?: string | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AudioBlock".
 */
export interface AudioBlock {
  title: string;
  artist: string;
  description?: string | null;
  file: number | AudioUpload;
  /**
   * Make this audio file downloadable by the user?
   */
  download?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'audio';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audio-upload".
 */
export interface AudioUpload {
  id: number;
  title?: string | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    url?: string | null;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "error-pages".
 */
export interface ErrorPage {
  id: number;
  errorType?: ('404' | '500') | null;
  title: string;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articles".
 */
export interface Article {
  id: number;
  /**
   * The title of the article.
   */
  title: string;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  /**
   * Author, or authors, of the article.
   */
  authors?:
    | {
        author?: (number | null) | Person;
        id?: string | null;
      }[]
    | null;
  contentMetadata?: {
    categories?:
      | {
          category?: (number | null) | Category;
          id?: string | null;
        }[]
      | null;
    genres?:
      | {
          genre?: (number | null) | Genre;
          id?: string | null;
        }[]
      | null;
    difficulties?:
      | {
          difficulty?: (number | null) | Difficulty;
          id?: string | null;
        }[]
      | null;
    instruments?:
      | {
          instrument?: (number | null) | Instrument;
          id?: string | null;
        }[]
      | null;
  };
  publishedDate: string;
  /**
   * Leave blank if the article has not been updated.
   */
  updatedDate?: string | null;
  excerpt?: string | null;
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "people".
 */
export interface Person {
  id: number;
  name: string;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  socialLinks?:
    | {
        socialLink?: {
          platform?:
            | (
                | 'facebook'
                | 'instagram'
                | 'twitter-x'
                | 'youtube'
                | 'tiktok'
                | 'twitch'
                | 'soundcloud'
                | 'spotify'
                | 'linkedin'
                | 'website'
              )
            | null;
          url?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  image?: (number | null) | Media;
  avatar?: (number | null) | Media;
  instrument?: (number | Instrument)[] | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "instruments".
 */
export interface Instrument {
  id: number;
  title: string;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres".
 */
export interface Genre {
  id: number;
  title: string;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "difficulties".
 */
export interface Difficulty {
  id: number;
  title: string;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resources".
 */
export interface Resource {
  id: number;
  title: string;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  /**
   * Author, or authors, of the resource.
   */
  authors?:
    | {
        author?: (number | null) | Person;
        id?: string | null;
      }[]
    | null;
  contentMetadata?: {
    categories?:
      | {
          category?: (number | null) | Category;
          id?: string | null;
        }[]
      | null;
    genres?:
      | {
          genre?: (number | null) | Genre;
          id?: string | null;
        }[]
      | null;
    difficulties?:
      | {
          difficulty?: (number | null) | Difficulty;
          id?: string | null;
        }[]
      | null;
    instruments?:
      | {
          instrument?: (number | null) | Instrument;
          id?: string | null;
        }[]
      | null;
  };
  publishedDate: string;
  /**
   * Leave blank if the resource has not been updated.
   */
  updatedDate?: string | null;
  excerpt?: string | null;
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lexicons".
 */
export interface Lexicon {
  id: number;
  artist: string;
  track?: string | null;
  album?: string | null;
  year?: string | null;
  /**
   * Enter the timestamp of the track in seconds
   */
  timestamp?: number | null;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  style?:
    | (
        | 'early-jazz'
        | 'swing'
        | 'bebop'
        | 'cool-jazz'
        | 'hard-bop'
        | 'modal-jazz'
        | 'free-jazz'
        | 'fusion'
        | 'smooth-jazz'
        | 'post-bop'
        | 'neo-soul'
        | 'contemporary'
        | 'other'
      )
    | null;
  length?: ('one-bar' | 'two-bars' | 'four-bars' | 'eight-bars' | 'other') | null;
  harmony?: ('ii-v-i' | 'iii-vi-ii-v-i' | 'i-iv-ii-v-i' | 'blues' | 'modal' | 'coltrane-changes' | 'other') | null;
  contentMetadata?: {
    categories?:
      | {
          category?: (number | null) | Category;
          id?: string | null;
        }[]
      | null;
    genres?:
      | {
          genre?: (number | null) | Genre;
          id?: string | null;
        }[]
      | null;
    difficulties?:
      | {
          difficulty?: (number | null) | Difficulty;
          id?: string | null;
        }[]
      | null;
    instruments?:
      | {
          instrument?: (number | null) | Instrument;
          id?: string | null;
        }[]
      | null;
  };
  excerpt: {
    title: string;
    description?: string | null;
    /**
     * Upload an audio file for the excerpt
     */
    audio?: (number | null) | Media;
    notationFiles?:
      | {
          key?: ('c' | 'bb' | 'eb' | 'f' | 'g' | 'bass-clef') | null;
          file?: (number | null) | NotationFile;
          id?: string | null;
        }[]
      | null;
  };
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "handbooks".
 */
export interface Handbook {
  id: number;
  title: string;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  authors?:
    | {
        author?: (number | null) | Person;
        id?: string | null;
      }[]
    | null;
  contentMetadata?: {
    categories?:
      | {
          category?: (number | null) | Category;
          id?: string | null;
        }[]
      | null;
    genres?:
      | {
          genre?: (number | null) | Genre;
          id?: string | null;
        }[]
      | null;
    difficulties?:
      | {
          difficulty?: (number | null) | Difficulty;
          id?: string | null;
        }[]
      | null;
    instruments?:
      | {
          instrument?: (number | null) | Instrument;
          id?: string | null;
        }[]
      | null;
  };
  publishedDate: string;
  updatedDate?: string | null;
  excerpt?: string | null;
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "snippets".
 */
export interface Snippet {
  id: number;
  title: string;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  authors?:
    | {
        author?: (number | null) | Person;
        id?: string | null;
      }[]
    | null;
  contentMetadata?: {
    categories?:
      | {
          category?: (number | null) | Category;
          id?: string | null;
        }[]
      | null;
    genres?:
      | {
          genre?: (number | null) | Genre;
          id?: string | null;
        }[]
      | null;
    difficulties?:
      | {
          difficulty?: (number | null) | Difficulty;
          id?: string | null;
        }[]
      | null;
    instruments?:
      | {
          instrument?: (number | null) | Instrument;
          id?: string | null;
        }[]
      | null;
  };
  publishedDate: string;
  updatedDate?: string | null;
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "podcasts".
 */
export interface Podcast {
  id: number;
  title: string;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  hosts?:
    | {
        host?: (number | null) | Person;
        id?: string | null;
      }[]
    | null;
  guesets?:
    | {
        guest?: (number | null) | Person;
        id?: string | null;
      }[]
    | null;
  contentMetadata?: {
    categories?:
      | {
          category?: (number | null) | Category;
          id?: string | null;
        }[]
      | null;
    genres?:
      | {
          genre?: (number | null) | Genre;
          id?: string | null;
        }[]
      | null;
    difficulties?:
      | {
          difficulty?: (number | null) | Difficulty;
          id?: string | null;
        }[]
      | null;
    instruments?:
      | {
          instrument?: (number | null) | Instrument;
          id?: string | null;
        }[]
      | null;
  };
  publishedDate: string;
  description?: string | null;
  audio?: (number | null) | Media;
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: number;
  title: string;
  description?: string | null;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: number;
  title: string;
  description?: string | null;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  lessons?:
    | {
        lessons?: (number | Lesson)[] | null;
        id?: string | null;
      }[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "curricula".
 */
export interface Curriculum {
  id: number;
  title: string;
  description?: string | null;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  courses?:
    | {
        courses?: (number | Course)[] | null;
        id?: string | null;
      }[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landing-pages".
 */
export interface LandingPage {
  id: number;
  title?: string | null;
  /**
   * Automatically generated from the title if left empty
   */
  slug: string;
  blocks?:
    | (
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | BlockquoteBlock
        | MusicNotationBlock
        | FileDownloadBlock
        | AudioBlock
        | {
            form?: (number | null) | Form;
            id?: string | null;
            blockName?: string | null;
            blockType: 'form';
          }
      )[]
    | null;
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links-in-bio".
 */
export interface LinksInBio {
  id: number;
  title?: string | null;
  reference?:
    | ({
        relationTo: 'articles';
        value: number | Article;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'curricula';
        value: number | Curriculum;
      } | null)
    | ({
        relationTo: 'handbooks';
        value: number | Handbook;
      } | null)
    | ({
        relationTo: 'lessons';
        value: number | Lesson;
      } | null)
    | ({
        relationTo: 'lexicons';
        value: number | Lexicon;
      } | null)
    | ({
        relationTo: 'podcasts';
        value: number | Podcast;
      } | null)
    | ({
        relationTo: 'resources';
        value: number | Resource;
      } | null)
    | ({
        relationTo: 'snippets';
        value: number | Snippet;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'landing-pages';
        value: number | LandingPage;
      } | null);
  metadata: {
    /**
     * Meta title (open graph) for SEO
     */
    title: string;
    /**
     * Meta description (open graph) for SEO
     */
    description: string;
    ogImage?: (number | null) | Media;
    /**
     * If checked, the page will not be indexed by search engines
     */
    noindex?: boolean | null;
    /**
     * If checked, the page will not be followed by search engines
     */
    nofollow?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'error-pages';
          value: number | ErrorPage;
        } | null)
      | ({
          relationTo: 'articles';
          value: number | Article;
        } | null)
      | ({
          relationTo: 'categories';
          value: number | Category;
        } | null)
      | ({
          relationTo: 'difficulties';
          value: number | Difficulty;
        } | null)
      | ({
          relationTo: 'genres';
          value: number | Genre;
        } | null)
      | ({
          relationTo: 'instruments';
          value: number | Instrument;
        } | null)
      | ({
          relationTo: 'people';
          value: number | Person;
        } | null)
      | ({
          relationTo: 'users';
          value: number | User;
        } | null)
      | ({
          relationTo: 'resources';
          value: number | Resource;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'error-pages';
        value: number | ErrorPage;
      } | null)
    | ({
        relationTo: 'articles';
        value: number | Article;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'difficulties';
        value: number | Difficulty;
      } | null)
    | ({
        relationTo: 'genres';
        value: number | Genre;
      } | null)
    | ({
        relationTo: 'instruments';
        value: number | Instrument;
      } | null)
    | ({
        relationTo: 'people';
        value: number | Person;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'resources';
        value: number | Resource;
      } | null)
    | ({
        relationTo: 'notation-files';
        value: number | NotationFile;
      } | null)
    | ({
        relationTo: 'audio-upload';
        value: number | AudioUpload;
      } | null)
    | ({
        relationTo: 'lexicons';
        value: number | Lexicon;
      } | null)
    | ({
        relationTo: 'handbooks';
        value: number | Handbook;
      } | null)
    | ({
        relationTo: 'snippets';
        value: number | Snippet;
      } | null)
    | ({
        relationTo: 'podcasts';
        value: number | Podcast;
      } | null)
    | ({
        relationTo: 'lessons';
        value: number | Lesson;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'curricula';
        value: number | Curriculum;
      } | null)
    | ({
        relationTo: 'landing-pages';
        value: number | LandingPage;
      } | null)
    | ({
        relationTo: 'links-in-bio';
        value: number | LinksInBio;
      } | null)
    | ({
        relationTo: 'documents';
        value: number | Document;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  excerpt?: T;
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlockquoteBlock_select".
 */
export interface BlockquoteBlockSelect<T extends boolean = true> {
  quote?: T;
  attribution?: T;
  url?:
    | T
    | {
        value?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MusicNotationBlock_select".
 */
export interface MusicNotationBlockSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  files?:
    | T
    | {
        file?: T;
        label?: T;
        customLabel?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FileDownloadBlock_select".
 */
export interface FileDownloadBlockSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  file?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AudioBlock_select".
 */
export interface AudioBlockSelect<T extends boolean = true> {
  title?: T;
  artist?: T;
  description?: T;
  file?: T;
  download?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "error-pages_select".
 */
export interface ErrorPagesSelect<T extends boolean = true> {
  errorType?: T;
  title?: T;
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articles_select".
 */
export interface ArticlesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  authors?:
    | T
    | {
        author?: T;
        id?: T;
      };
  contentMetadata?:
    | T
    | {
        categories?:
          | T
          | {
              category?: T;
              id?: T;
            };
        genres?:
          | T
          | {
              genre?: T;
              id?: T;
            };
        difficulties?:
          | T
          | {
              difficulty?: T;
              id?: T;
            };
        instruments?:
          | T
          | {
              instrument?: T;
              id?: T;
            };
      };
  publishedDate?: T;
  updatedDate?: T;
  excerpt?: T;
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "difficulties_select".
 */
export interface DifficultiesSelect<T extends boolean = true> {
  title?: T;
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres_select".
 */
export interface GenresSelect<T extends boolean = true> {
  title?: T;
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "instruments_select".
 */
export interface InstrumentsSelect<T extends boolean = true> {
  title?: T;
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "people_select".
 */
export interface PeopleSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  socialLinks?:
    | T
    | {
        socialLink?:
          | T
          | {
              platform?: T;
              url?: T;
            };
        id?: T;
      };
  image?: T;
  avatar?: T;
  instrument?: T;
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resources_select".
 */
export interface ResourcesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  authors?:
    | T
    | {
        author?: T;
        id?: T;
      };
  contentMetadata?:
    | T
    | {
        categories?:
          | T
          | {
              category?: T;
              id?: T;
            };
        genres?:
          | T
          | {
              genre?: T;
              id?: T;
            };
        difficulties?:
          | T
          | {
              difficulty?: T;
              id?: T;
            };
        instruments?:
          | T
          | {
              instrument?: T;
              id?: T;
            };
      };
  publishedDate?: T;
  updatedDate?: T;
  excerpt?: T;
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notation-files_select".
 */
export interface NotationFilesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audio-upload_select".
 */
export interface AudioUploadSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lexicons_select".
 */
export interface LexiconsSelect<T extends boolean = true> {
  artist?: T;
  track?: T;
  album?: T;
  year?: T;
  timestamp?: T;
  slug?: T;
  style?: T;
  length?: T;
  harmony?: T;
  contentMetadata?:
    | T
    | {
        categories?:
          | T
          | {
              category?: T;
              id?: T;
            };
        genres?:
          | T
          | {
              genre?: T;
              id?: T;
            };
        difficulties?:
          | T
          | {
              difficulty?: T;
              id?: T;
            };
        instruments?:
          | T
          | {
              instrument?: T;
              id?: T;
            };
      };
  excerpt?:
    | T
    | {
        title?: T;
        description?: T;
        audio?: T;
        notationFiles?:
          | T
          | {
              key?: T;
              file?: T;
              id?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "handbooks_select".
 */
export interface HandbooksSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  authors?:
    | T
    | {
        author?: T;
        id?: T;
      };
  contentMetadata?:
    | T
    | {
        categories?:
          | T
          | {
              category?: T;
              id?: T;
            };
        genres?:
          | T
          | {
              genre?: T;
              id?: T;
            };
        difficulties?:
          | T
          | {
              difficulty?: T;
              id?: T;
            };
        instruments?:
          | T
          | {
              instrument?: T;
              id?: T;
            };
      };
  publishedDate?: T;
  updatedDate?: T;
  excerpt?: T;
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "snippets_select".
 */
export interface SnippetsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  authors?:
    | T
    | {
        author?: T;
        id?: T;
      };
  contentMetadata?:
    | T
    | {
        categories?:
          | T
          | {
              category?: T;
              id?: T;
            };
        genres?:
          | T
          | {
              genre?: T;
              id?: T;
            };
        difficulties?:
          | T
          | {
              difficulty?: T;
              id?: T;
            };
        instruments?:
          | T
          | {
              instrument?: T;
              id?: T;
            };
      };
  publishedDate?: T;
  updatedDate?: T;
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "podcasts_select".
 */
export interface PodcastsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  hosts?:
    | T
    | {
        host?: T;
        id?: T;
      };
  guesets?:
    | T
    | {
        guest?: T;
        id?: T;
      };
  contentMetadata?:
    | T
    | {
        categories?:
          | T
          | {
              category?: T;
              id?: T;
            };
        genres?:
          | T
          | {
              genre?: T;
              id?: T;
            };
        difficulties?:
          | T
          | {
              difficulty?: T;
              id?: T;
            };
        instruments?:
          | T
          | {
              instrument?: T;
              id?: T;
            };
      };
  publishedDate?: T;
  description?: T;
  audio?: T;
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  lessons?:
    | T
    | {
        lessons?: T;
        id?: T;
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "curricula_select".
 */
export interface CurriculaSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  courses?:
    | T
    | {
        courses?: T;
        id?: T;
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landing-pages_select".
 */
export interface LandingPagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  blocks?:
    | T
    | {
        richText?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
        blockquote?: T | BlockquoteBlockSelect<T>;
        musicNotation?: T | MusicNotationBlockSelect<T>;
        'file-download'?: T | FileDownloadBlockSelect<T>;
        audio?: T | AudioBlockSelect<T>;
        form?:
          | T
          | {
              form?: T;
              id?: T;
              blockName?: T;
            };
      };
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links-in-bio_select".
 */
export interface LinksInBioSelect<T extends boolean = true> {
  title?: T;
  reference?: T;
  metadata?:
    | T
    | {
        title?: T;
        description?: T;
        ogImage?: T;
        noindex?: T;
        nofollow?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  categories?:
    | {
        category?: {
          title?: string | null;
          links?:
            | {
                link?: {
                  location?: ('internal' | 'customInternal' | 'external' | 'email' | 'phone') | null;
                  text?: string | null;
                  newTab?: boolean | null;
                  internalLink?:
                    | ({
                        relationTo: 'pages';
                        value: number | Page;
                      } | null)
                    | ({
                        relationTo: 'articles';
                        value: number | Article;
                      } | null)
                    | ({
                        relationTo: 'categories';
                        value: number | Category;
                      } | null)
                    | ({
                        relationTo: 'difficulties';
                        value: number | Difficulty;
                      } | null)
                    | ({
                        relationTo: 'genres';
                        value: number | Genre;
                      } | null)
                    | ({
                        relationTo: 'instruments';
                        value: number | Instrument;
                      } | null)
                    | ({
                        relationTo: 'people';
                        value: number | Person;
                      } | null);
                  url?: string | null;
                  internalPath?: string | null;
                  phoneNumber?: string | null;
                  emailAddress?: string | null;
                };
                id?: string | null;
              }[]
            | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: number;
  siteName?: string | null;
  siteDescription?: string | null;
  defaultOGImage?: (number | null) | Media;
  socialLinks?:
    | {
        socialLink?: {
          platform?:
            | (
                | 'facebook'
                | 'instagram'
                | 'twitter-x'
                | 'youtube'
                | 'tiktok'
                | 'twitch'
                | 'soundcloud'
                | 'spotify'
                | 'linkedin'
                | 'website'
              )
            | null;
          url?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation".
 */
export interface Navigation {
  id: number;
  links?:
    | {
        link?: {
          location?: ('internal' | 'customInternal' | 'external' | 'email' | 'phone') | null;
          text?: string | null;
          newTab?: boolean | null;
          internalLink?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'articles';
                value: number | Article;
              } | null)
            | ({
                relationTo: 'categories';
                value: number | Category;
              } | null)
            | ({
                relationTo: 'difficulties';
                value: number | Difficulty;
              } | null)
            | ({
                relationTo: 'genres';
                value: number | Genre;
              } | null)
            | ({
                relationTo: 'instruments';
                value: number | Instrument;
              } | null)
            | ({
                relationTo: 'people';
                value: number | Person;
              } | null);
          url?: string | null;
          internalPath?: string | null;
          phoneNumber?: string | null;
          emailAddress?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  categories?:
    | T
    | {
        category?:
          | T
          | {
              title?: T;
              links?:
                | T
                | {
                    link?:
                      | T
                      | {
                          location?: T;
                          text?: T;
                          newTab?: T;
                          internalLink?: T;
                          url?: T;
                          internalPath?: T;
                          phoneNumber?: T;
                          emailAddress?: T;
                        };
                    id?: T;
                  };
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  siteName?: T;
  siteDescription?: T;
  defaultOGImage?: T;
  socialLinks?:
    | T
    | {
        socialLink?:
          | T
          | {
              platform?: T;
              url?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation_select".
 */
export interface NavigationSelect<T extends boolean = true> {
  links?:
    | T
    | {
        link?:
          | T
          | {
              location?: T;
              text?: T;
              newTab?: T;
              internalLink?: T;
              url?: T;
              internalPath?: T;
              phoneNumber?: T;
              emailAddress?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'articles';
          value: number | Article;
        } | null)
      | ({
          relationTo: 'resources';
          value: number | Resource;
        } | null)
      | ({
          relationTo: 'lexicons';
          value: number | Lexicon;
        } | null)
      | ({
          relationTo: 'handbooks';
          value: number | Handbook;
        } | null)
      | ({
          relationTo: 'snippets';
          value: number | Snippet;
        } | null)
      | ({
          relationTo: 'podcasts';
          value: number | Podcast;
        } | null)
      | ({
          relationTo: 'lessons';
          value: number | Lesson;
        } | null)
      | ({
          relationTo: 'courses';
          value: number | Course;
        } | null)
      | ({
          relationTo: 'curricula';
          value: number | Curriculum;
        } | null)
      | ({
          relationTo: 'landing-pages';
          value: number | LandingPage;
        } | null)
      | ({
          relationTo: 'links-in-bio';
          value: number | LinksInBio;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InlineChordBlock".
 */
export interface InlineChordBlock {
  root?: string | null;
  quality?:
    | (
        | 'major'
        | 'major7'
        | 'major6'
        | 'dominant7'
        | 'minor'
        | 'minor7'
        | 'minMaj7'
        | 'dim'
        | 'dim7'
        | 'halfDim7'
        | 'sus4'
        | 'aug'
        | 'aug7'
      )
    | null;
  extension?:
    | ('flat9' | 'flat5' | 'sharp5' | 'flat13' | 'sharp9' | 'sharp11' | 'sharp9flat9' | 'sixNine' | 'altered')
    | null;
  alternateBass?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'inline-chord';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InlineMusicTextBlock".
 */
export interface InlineMusicTextBlock {
  options?:
    | {
        type: 'clef' | 'accidental' | 'barValue' | 'musicSymbol' | 'rhythmicValue' | 'text';
        clef?: {
          clef?: ('treble-clef' | 'alto-clef' | 'bass-clef' | 'drum-clef') | null;
        };
        accidental?: {
          accidental?: ('flat' | 'sharp' | 'double-flat' | 'double-sharp' | 'natural') | null;
        };
        barValue?: {
          barValue?:
            | ('single' | 'double' | 'final' | 'final-reverse' | 'dashed' | 'repeat-left' | 'repeat-right')
            | null;
        };
        musicSymbol?: {
          musicSymbol?: ('dal-segno' | 'da-capo' | 'segno' | 'fermata' | 'breath-mark' | 'caesura' | 'code') | null;
        };
        rhythmicValue?: {
          rhythmicValue?:
            | ('whole-note' | 'half-note' | 'quarter-note' | 'eighth-note' | 'sixteenth-note' | 'thirty-second-note')
            | null;
        };
        text?: {
          text?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'inline-music-text';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InlineReferenceBlock".
 */
export interface InlineReferenceBlock {
  text: string;
  reference:
    | {
        relationTo: 'articles';
        value: number | Article;
      }
    | {
        relationTo: 'courses';
        value: number | Course;
      }
    | {
        relationTo: 'curricula';
        value: number | Curriculum;
      }
    | {
        relationTo: 'handbooks';
        value: number | Handbook;
      }
    | {
        relationTo: 'lessons';
        value: number | Lesson;
      }
    | {
        relationTo: 'lexicons';
        value: number | Lexicon;
      }
    | {
        relationTo: 'podcasts';
        value: number | Podcast;
      }
    | {
        relationTo: 'resources';
        value: number | Resource;
      }
    | {
        relationTo: 'snippets';
        value: number | Snippet;
      };
  id?: string | null;
  blockName?: string | null;
  blockType: 'inline-reference';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}