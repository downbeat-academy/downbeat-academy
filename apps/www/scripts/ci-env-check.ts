#!/usr/bin/env tsx
/**
 * CI Environment Pre-check Script
 * 
 * This script validates environment variables in CI/CD environments before
 * running Cypress tests. It provides clear error messages and suggestions
 * for missing or misconfigured variables.
 * 
 * Usage: tsx scripts/ci-env-check.ts
 */

import { validateEnvironmentVariables, testDatabaseConnection } from './validate-test-env'

interface CIEnvironmentCheck {
	requiredSecrets: string[]
	optionalSecrets: string[]
	generatedVars: string[]
}

const CI_CONFIG: CIEnvironmentCheck = {
	// These must be set as GitHub Secrets
	requiredSecrets: [
		'BETTER_AUTH_SECRET',
		'BETTER_AUTH_URL',
		'NEXT_PUBLIC_PROJECT_URL'
	],
	// These are optional but recommended for full testing
	optionalSecrets: [
		'RESEND_API_KEY',
		'NEXT_PUBLIC_SANITY_PROJECT_ID',
		'NEXT_PUBLIC_SANITY_DATASET',
		'NEXT_PUBLIC_SANITY_API_VERSION',
		'SANITY_API_TOKEN',
		'SANITY_API_READ_TOKEN'
	],
	// These are generated by the CI environment or workflow
	generatedVars: [
		'DATABASE_URL',
		'DATABASE_URL_AUTH',
		'TEST_DATABASE_URL',
		'CI',
		'GITHUB_ACTIONS',
		'CYPRESS_BASE_URL'
	]
}

function checkCISecrets(): { errors: string[]; warnings: string[] } {
	const errors: string[] = []
	const warnings: string[] = []

	console.log('🔐 Checking GitHub Secrets configuration...\n')

	// Check required secrets
	for (const secret of CI_CONFIG.requiredSecrets) {
		const value = process.env[secret]
		if (!value || value.trim() === '') {
			errors.push(`Required secret '${secret}' is missing or empty`)
			console.log(`❌ ${secret}: Missing (required secret)`)
		} else {
			// Don't log actual secret values, just confirm they exist
			console.log(`✅ ${secret}: Configured`)
		}
	}

	// Check optional secrets
	for (const secret of CI_CONFIG.optionalSecrets) {
		const value = process.env[secret]
		if (!value || value.trim() === '') {
			warnings.push(`Optional secret '${secret}' is not configured - some features may not work`)
			console.log(`⚠️  ${secret}: Not configured (optional)`)
		} else {
			console.log(`✅ ${secret}: Configured`)
		}
	}

	// Check generated variables
	console.log('\n🤖 Checking CI-generated variables...')
	for (const varName of CI_CONFIG.generatedVars) {
		const value = process.env[varName]
		if (!value || value.trim() === '') {
			if (varName.includes('DATABASE')) {
				errors.push(`Database variable '${varName}' should be set by CI workflow`)
				console.log(`❌ ${varName}: Missing (should be generated by workflow)`)
			} else {
				warnings.push(`Generated variable '${varName}' is not set`)
				console.log(`⚠️  ${varName}: Not set`)
			}
		} else {
			// For URLs and non-sensitive vars, we can show masked values
			if (varName.includes('URL')) {
				console.log(`✅ ${varName}: ${value}`)
			} else if (varName.includes('DATABASE')) {
				console.log(`✅ ${varName}: ${value.replace(/\/\/.*:.*@/, '//***:***@')}`)
			} else {
				console.log(`✅ ${varName}: ${value}`)
			}
		}
	}

	return { errors, warnings }
}

function checkWorkflowEnvironment(): { errors: string[]; warnings: string[] } {
	const errors: string[] = []
	const warnings: string[] = []

	console.log('\n🏗️  Checking CI workflow environment...')

	// Check if we're actually in CI
	const isCI = process.env.CI === 'true'
	const isGitHubActions = process.env.GITHUB_ACTIONS === 'true'

	if (!isCI) {
		warnings.push('CI environment variable is not set to "true"')
		console.log('⚠️  CI: Not detected as CI environment')
	} else {
		console.log('✅ CI: Running in CI environment')
	}

	if (!isGitHubActions) {
		warnings.push('GITHUB_ACTIONS environment variable is not set')
		console.log('⚠️  GITHUB_ACTIONS: Not detected as GitHub Actions')
	} else {
		console.log('✅ GITHUB_ACTIONS: Running in GitHub Actions')
	}

	// Check for PostgreSQL service
	const hasPostgres = process.env.DATABASE_URL?.includes('postgresql') || 
					   process.env.TEST_DATABASE_URL?.includes('postgresql')
	
	if (!hasPostgres) {
		errors.push('PostgreSQL database service is not properly configured')
		console.log('❌ PostgreSQL: Database service not detected')
	} else {
		console.log('✅ PostgreSQL: Database service detected')
	}

	// Check Node.js version
	const nodeVersion = process.version
	console.log(`ℹ️  Node.js Version: ${nodeVersion}`)

	// Check for required binaries
	try {
		const cypressVersion = require('cypress/package.json').version
		console.log(`ℹ️  Cypress Version: ${cypressVersion}`)
	} catch {
		warnings.push('Cypress package information not available')
		console.log('⚠️  Cypress: Version information not available')
	}

	return { errors, warnings }
}

function generateSecretSetupGuide(): string {
	const missingSecrets = CI_CONFIG.requiredSecrets.filter(secret => 
		!process.env[secret] || process.env[secret]!.trim() === ''
	)

	if (missingSecrets.length === 0) return ''

	return `
📋 Missing GitHub Secrets Setup Guide:

To fix the missing secrets, go to your GitHub repository and add these secrets:
Repository → Settings → Secrets and Variables → Actions

Required Secrets:
${missingSecrets.map(secret => {
	switch (secret) {
		case 'BETTER_AUTH_SECRET':
			return `• ${secret}: Generate a secure random string (32+ characters)`
		case 'BETTER_AUTH_URL':
			return `• ${secret}: Your production app URL (e.g., https://your-app.com)`
		case 'NEXT_PUBLIC_PROJECT_URL':
			return `• ${secret}: Your app's public URL (can be same as BETTER_AUTH_URL)`
		default:
			return `• ${secret}: See project documentation`
	}
}).join('\n')}

Optional Secrets (for full functionality):
${CI_CONFIG.optionalSecrets.map(secret => `• ${secret}: See project documentation`).join('\n')}
`
}

async function main() {
	console.log('🚀 CI Environment Pre-check for Cypress Tests\n')
	console.log('================================================\n')

	let overallErrors: string[] = []
	let overallWarnings: string[] = []

	try {
		// 1. Check GitHub Secrets
		const secretsCheck = checkCISecrets()
		overallErrors.push(...secretsCheck.errors)
		overallWarnings.push(...secretsCheck.warnings)

		// 2. Check workflow environment
		const workflowCheck = checkWorkflowEnvironment()
		overallErrors.push(...workflowCheck.errors)
		overallWarnings.push(...workflowCheck.warnings)

		// 3. Run standard environment validation
		console.log('\n🔍 Running standard environment validation...')
		const envValidation = await validateEnvironmentVariables()
		overallErrors.push(...envValidation.errors)
		overallWarnings.push(...envValidation.warnings)

		// 4. Test database connection
		console.log('\n🔌 Testing database connection...')
		const dbTest = await testDatabaseConnection()
		if (!dbTest.success) {
			overallErrors.push(`Database connection failed: ${dbTest.error}`)
		}

		// 5. Print comprehensive summary
		console.log('\n📊 CI Pre-check Summary:')
		console.log('================================================')
		console.log(`Total Errors: ${overallErrors.length}`)
		console.log(`Total Warnings: ${overallWarnings.length}`)
		console.log(`Database Connection: ${dbTest.success ? '✅ Success' : '❌ Failed'}`)
		console.log(`Environment Valid: ${envValidation.valid ? '✅ Valid' : '❌ Invalid'}`)

		if (overallErrors.length > 0) {
			console.log('\n❌ Critical Errors (must fix):')
			overallErrors.forEach((error, index) => {
				console.log(`   ${index + 1}. ${error}`)
			})
		}

		if (overallWarnings.length > 0) {
			console.log('\n⚠️  Warnings (recommend fixing):')
			overallWarnings.forEach((warning, index) => {
				console.log(`   ${index + 1}. ${warning}`)
			})
		}

		// Generate setup guide if needed
		const secretGuide = generateSecretSetupGuide()
		if (secretGuide) {
			console.log(secretGuide)
		}

		// Final result
		const success = overallErrors.length === 0 && dbTest.success
		
		console.log(`\n${success ? '🎉' : '❌'} CI Environment Pre-check ${success ? 'PASSED' : 'FAILED'}`)
		
		if (success) {
			console.log('✅ Environment is properly configured for Cypress tests')
		} else {
			console.log('❌ Environment issues must be resolved before running tests')
			console.log('\n💡 Next Steps:')
			console.log('   1. Fix all critical errors listed above')
			console.log('   2. Configure missing GitHub Secrets')
			console.log('   3. Verify database service is running')
			console.log('   4. Re-run this check: tsx scripts/ci-env-check.ts')
		}

		process.exit(success ? 0 : 1)

	} catch (error) {
		console.error('\n❌ CI pre-check failed with error:', error)
		process.exit(1)
	}
}

// Run if called directly
if (require.main === module) {
	main()
}